import mongoose from "mongoose";
import jwt from "jsonwebtoken"; // This is used to create token like Bearer tokens
import bcrypt from "bcrypt"; //This is used to encrypt the passwords

/*
    Note: Direct encryption is not possible. Thus we need to use some mongoose hooks.
    Pre (hook):
        This is a middleware. This is used to run some function on the data just before it is going
        to be saved in DB
*/

const userSchema = new mongoose.Schema(
    {
        username: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true,
            index: true,
        },
        email: {
            type: String,
            required: true,
            unique: true,
            lowercase: true,
            trim: true,
        },
        fullName: {
            type: String,
            required: true,
            trim: true,
            index: true,
        },
        avatar: {
            type: String,
            required: true,
        },
        coverImage: {
            type: String,
        },
        watchHistory: [
            {
                type: mongoose.Schema.Types.ObjectId,
                ref: "Video",
            },
        ],
        password: {
            type: String,
            required: [true, "Password is required"],
        },
        refreshToken: {
            type: String,
        },
    },
    { timestamps: true }
);

//Don't write the callback as arrow function in pre() as arrow function dont have the access to this.
//As pre() is a middleware so it must have access to next flag.
userSchema.pre("save", async function (next) {
    //this.isModified(<field-name>) is used to check if the given field is modified or not
    if (!this.isModified("password")) {
        return;
    }
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

//mongoose provide us the functionality to design custom methods.
//Thus we have injected the isPasswordCorrect method to check if the password send by user and password saved in DB are same or not
userSchema.methods.isPasswordCorrect = async function (password) {
    return await bcrypt.compare(password, this.password);
};

/*
    jwt is a Bearer token means those who have this token will be considered as authorised user.

*/
userSchema.methods.generateAccessToken = function () {
    //We generally sent much info in Access Token Generation
    return jwt.sign(
        {
            //This object is sent as some information for the jwt token to be generated
            _id: this._id, //This is the Primary Key generated by mongoDB
            email: this.email,
            username: this.username,
            fullName: this.fullName,
        },
        process.env.ACCESS_TOKEN_SECRET,
        {
            //The expiry info is sent in an object
            expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
        }
    );
};

userSchema.methods.generateRefreshToken = function () {
    // We gebrally dont send much info in refresh token generation
    return jwt.sign(
        {
            //This object is sent as some information for the jwt token to be generated
            _id: this._id, //This is the Primary Key generated by mongoDB
        },
        process.env.REFRESH_TOKEN_SECRET,
        {
            //The expiry info is sent in an object
            expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
        }
    );
};

export const User = mongoose.model("User", userSchema);
